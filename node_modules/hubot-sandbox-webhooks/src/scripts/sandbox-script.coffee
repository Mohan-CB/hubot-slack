# Description
#   Listen for a command to build a sandbox, and then
#   send a request to hotpot to actually build said sandbox
#
# Commands:
#   hubot build sandbox sandbox=<sandbox> branch=<branch> customer=<customer system id> [attachments=true, force=false] - Sets up the sandbox with a branch and customer configuration
module.exports = (robot) ->
  parseArgs = (argString, possibleArgs) ->
    correlations = {};
    for key of possibleArgs
      arr = possibleArgs[key]
      for val in arr
        correlations[val] = key

    args = {}
    for pair in argString.split(' ')
      pair = pair.split('=')
      if pair.length == 2 and pair[0] of correlations
        args[correlations[pair[0]]] = pair[1]

    return args

  robot.respond /(build|create|reset) sandbox (.*)/i, (msg) ->
    possibleArgs = {
      sandbox: ['sandbox', 'sb'],
      customer_system: ['customer_system', 'customer', 'cs'],
      branch: ['branch', 'br'],
      copy_attachments: ['attachments', 'withAttachments', 'attach'],
      force_push: ['force', 'force_push']
    }

    args = parseArgs(msg.match[2], possibleArgs)
    if !(args.sandbox? and args.customer_system? and args.branch?)
      msg.reply "There appears to be an error with the formatting of your request."
      return

    customer_system = parseInt(args.customer_system, 10)
    if !customer_system
      msg.reply "You must provide a numeric ID for the customer system"
      return

    json = JSON.stringify({
      jobType: "SANDBOX",
      queueContent: {
        sandbox: args.sandbox,
        branch: args.branch,
        customer_system: customer_system,
        copy_attachments: args.copy_attachments == 'true'
      }
    })

    username = process.env["HOTPOT_USERNAME"]
    password = process.env["HOTPOT_PASSWORD"]
    hotpot_url = process.env["HOTPOT_ENDPOINT"]

    if !username? or !password? or !hotpot_url?
      robot.logger.warning "sandbox create environment variables not configured correctly"
      msg.reply "I seem to be having some problems at the moment..."
      return

    currOwnerID = robot.brain.data.sandboxes[args.sandbox]?.owner
    if !currOwnerID?
      msg.reply "Please take ownership of this sandbox before you attempt to build it."
      return
    if currOwnerID and currOwnerID != msg.message.user.id and args.force_push != true
      currOwnerName = robot.brain.userForId(currOwnerID)?.name
      msg.reply "The sandbox is currently owned by: #{currOwnerName}." +
      "Please add force=true to your build command to overwrite the sandbox," +
      " or become the owner of the sandbox with the `i'm using sandbox...` command."
      return

    auth = "Basic " + (new Buffer("#{username}:#{password}").toString('base64'))

    robot.http(hotpot_url)
      .header('Authorization', auth)
      .post(json) (err, res, body) ->
        if err or res.statusCode != 201
          robot.logger.warning err
          robot.logger.warning res.statusCode
          msg.reply "There was an error processing your request."
        else
          msg.reply "Your request was processed. When the sandbox is ready, a message will be sent to its owner."
